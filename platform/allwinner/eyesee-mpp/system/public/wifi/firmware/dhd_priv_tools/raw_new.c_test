
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/ioctl.h>
#include <linux/socket.h>
#include <linux/if_ether.h>
//#include <linux/in.h>
#include <stdio.h>
#include <string.h>
#include <netpacket/packet.h>
#include <net/if.h>
#include <netinet/in.h>

#include <stdlib.h>
#include <stdio.h>
#include <stdarg.h>
#include <string.h>
#include <errno.h>

//unsigned short protocol = 0x888e;
unsigned short protocol = 0x0003;
#define NAME "wlan0"
int cc = 0;


int main(int argc, char ** argv)
{
    struct ifreq ifr;
    struct sockaddr_ll ll;
    int fd;

    printf("[FUN]:%s [LINE]:%d  =====>  htons(protocol[%d]):%d \n", __func__, __LINE__, protocol, htons(protocol));
    printf("[FUN]:%s [LINE]:%d  =====>  htons(ETH_P_ALL[%d]):%d \n", __func__, __LINE__, ETH_P_ALL, htons(ETH_P_ALL));

    fd = socket(PF_PACKET, SOCK_RAW, htons(protocol));
    printf("fd = %d \n", fd);
    if(argv[1])
        printf("name = %s \n", argv[1]);

    memset(&ifr, 0, sizeof(ifr));
    if(argv[1]) 
        strncpy(ifr.ifr_name, argv[1], sizeof(ifr.ifr_name));
    else 
        strncpy(ifr.ifr_name, NAME, sizeof(ifr.ifr_name));

    printf("ifr.ifr_name = %s \n", ifr.ifr_name);

    if (ioctl(fd, SIOCGIFINDEX, &ifr) < 0) {
        close(fd);
        printf("get infr fail\n");
        return -1;
    }

    memset(&ll, 0, sizeof(ll));
    ll.sll_family = PF_PACKET;
    ll.sll_ifindex = ifr.ifr_ifindex;
    ll.sll_protocol = htons(protocol);
    if (bind(fd, (struct sockaddr *) &ll, sizeof(ll)) < 0) {
        printf("bind fail \n");
        close(fd);
        return -1;
    }


    while(1) {

        unsigned char buf[2300];
        int res;
        socklen_t fromlen;
        int i = 0;

        memset(&ll, 0, sizeof(ll));
        fromlen = sizeof(ll);
        res = recvfrom(fd, buf, sizeof(buf), 0, (struct sockaddr *) &ll,
                &fromlen);
        if (res < 0) {
            printf("res < 0\n");
            return -1;
        } else {
            cc++;
            printf("%04d(%03d) - ", cc, res);
            for(i = 0; i < res && i < 256; i++)
            {
                if (192 == buf[i]) {
                    printf("[%d.%d.%d.%d] ", buf[i], buf[i+1], buf[i+2], buf[i+3]);
                    i += 3;
                } else {
                    printf("%02x ", buf[i]);
                }
            }
            printf("\n");
        }
    }

    close(fd);

    return 0;

}


#define BUF_SIZE 4096

static void *ReadFrameThread(void *context)
{
    char buf[BUF_SIZE] = {0};
    int sockopt, sockfd;
    int len, ret;
    struct ifreq ifopts;

    /* set promiscuous mode */
    if ((sockfd = socket(PF_PACKET, SOCK_RAW, htons(ETH_P_ALL))) < 0) {
        printf("socket open failed\n");
        return (void*)0;
    }

    strncpy(ifopts.ifr_name, NAME, strlen(NAME)-1);
    printf("interface:%s\n", ifopts.ifr_name);
    if (ioctl(sockfd, SIOCGIFFLAGS, &ifopts) < 0) {
        printf("ioctl SIOCGIFFLAGS failed:%s\n", strerror(errno));
        close(sockfd);
        return (void*)0;
    }

    ifopts.ifr_flags |= IFF_PROMISC;
    if (ioctl(sockfd, SIOCSIFFLAGS, &ifopts) < 0) {
        printf("ioctl SIOCSIFFLAGS failed:%s\n", strerror(errno));
        return (void*)0;
    }

    /* Allow the socket to be reused - incase connection is closed prematurely */
    if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &sockopt, sizeof(sockopt)) == -1) {
        printf("setsockopt SO_REUSEADDR failed:%s\n", strerror(errno));
        close(sockfd);
        return (void*)0;
    }
    /* Bind to device */
    if (setsockopt(sockfd, SOL_SOCKET, SO_BINDTODEVICE, NAME, strlen(NAME)-1) == -1) {
        printf("setsockopt SO_BINDTODEVICE %s failed:%s\n", NAME, strerror(errno));
        close(sockfd);
        return (void*)0;
    }

    while(1)
    {
        len = recvfrom(sockfd, buf, BUF_SIZE-1 , 0, NULL, NULL);

#if 1
        printf("len:%d, buf:", len);
        int i = 0;
        for (i = 18; i< len-18; i++) {
            printf("%02x ", buf[i]);
        }
        printf("\n");
#endif // for debug

        // 将网络帧传入airkiss库进行处理
        //ret = ::airkiss_recv(&(airkiss->akcontext_), buf+18, len-18);
    }
    close(sockfd);
    return (void*)0;
}

